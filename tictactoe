import 'package:flutter/material.dart';
import 'dart:async';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Tic-Tac-Toe',
      home: GameScreen(),
    );
  }
}

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _State();
}

class _State extends State<GameScreen> {
  List<String> displayXO = ['', '', '', '', '', '', '', '', ''];
  List<int> matchInd = [];
  bool oturn = true;
  String result = '';
  var oscore = 0;
  var xscore = 0;
  int filledboxes = 0;
  bool winfoun = false;
  static const maxSec = 30;
  int sec = maxSec;
  Timer? timer;
  int attempts = 0;

  void startTimer() {
    timer = Timer.periodic(Duration(seconds: 1), (_) {
      setState(() {
        if (sec > 0) {
          sec--;
        } else
          stop();
      });
    });
  }

  void stop() {
    reset();
    timer?.cancel();
  }

  void reset() => sec = maxSec;

  void _tap(index) {
    final isRunning = timer == null ? false : timer!.isActive;
    if (isRunning) {
      setState(() {
        if (oturn && displayXO[index] == '') {
          displayXO[index] = 'O';
          filledboxes++;
        } else {
          displayXO[index] = 'X';
          filledboxes++;
        }
        oturn = !oturn;
        _winner();
      });
    }
  }

  void _winner() {
    if (displayXO[0] == displayXO[1] &&
        displayXO[0] == displayXO[2] &&
        displayXO[0] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[0] +
            ' is ' +
            ' Winner';
        _scores(displayXO[0]);
        matchInd.addAll([0, 1, 2]);
        stop();
      });
    }
    if (displayXO[0] == displayXO[3] &&
        displayXO[0] == displayXO[6] &&
        displayXO[0] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[0] +
            ' is ' +
            ' Winner';
        _scores(displayXO[0]);
        matchInd.addAll([0, 3, 6]);
        stop();
      });
    }
    if (displayXO[0] == displayXO[4] &&
        displayXO[0] == displayXO[8] &&
        displayXO[0] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[0] +
            ' is ' +
            ' Winner';
        _scores(displayXO[0]);
        matchInd.addAll([0, 4, 8]);
        stop();
      });
    }
    if (displayXO[3] == displayXO[4] &&
        displayXO[3] == displayXO[5] &&
        displayXO[3] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[3] +
            ' is ' +
            ' Winner';
        _scores(displayXO[3]);
        matchInd.addAll([3, 4, 5]);
        stop();
      });
    }
    if (displayXO[08] == displayXO[6] &&
        displayXO[8] == displayXO[7] &&
        displayXO[8] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[6] +
            ' is ' +
            ' Winner';
        _scores(displayXO[8]);
        matchInd.addAll([8, 6, 7]);
        stop();
      });
    }
    if (displayXO[1] == displayXO[4] &&
        displayXO[1] == displayXO[5] &&
        displayXO[1] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[1] +
            ' is ' +
            ' Winner';
        _scores(displayXO[1]);
        matchInd.addAll([1, 4, 5]);
        stop();
      });
    }
    if (displayXO[2] == displayXO[5] &&
        displayXO[2] == displayXO[8] &&
        displayXO[2] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[2] +
            ' is ' +
            ' Winner';
        _scores(displayXO[2]);
        matchInd.addAll([2, 5, 8]);
        stop();
      });
    }
    if (displayXO[2] == displayXO[4] &&
        displayXO[2] == displayXO[6] &&
        displayXO[2] != '') {
      setState(() {
        result = 'ðŸŽ‰CongratulationsðŸŽ‰' +
            'Player' +
            displayXO[2] +
            ' is ' +
            ' Winner';
        _scores(displayXO[2]);
        matchInd.addAll([2, 4, 6]);
        stop();
      });
    }
    if (!winfoun && filledboxes == 9) {
      result = 'Try another match';
    }
  }

  void _scores(String winner) {
    if (winner == 'O') {
      oscore++;
    } else if (winner == 'X') {
      xscore++;
    }
    winfoun = true;
  }

  void _clearboard() {
    setState(() {
      for (int i = 0; i < 9; i++) {
        displayXO[i] = '';
      }
      result = '';
    });
    filledboxes = 0;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey,
      body: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(children: [
            Expanded(
              flex: 2,
              child: Container(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Column(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Text(
                          'Player O',
                          style: TextStyle(
                              fontSize: 30,
                              fontWeight: FontWeight.bold,
                              color: Colors.white),
                        ),
                        Text(
                          oscore.toString(),
                          style: TextStyle(
                              fontSize: 30,
                              fontWeight: FontWeight.bold,
                              color: Colors.white),
                        )
                      ],
                    ),
                    SizedBox(
                      width: 20,
                    ),
                    Column(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Text(
                          'Player X',
                          style: TextStyle(
                              fontSize: 30,
                              fontWeight: FontWeight.bold,
                              color: Colors.white),
                        ),
                        Text(
                          xscore.toString(),
                          style: TextStyle(
                              fontSize: 30,
                              fontWeight: FontWeight.bold,
                              color: Colors.white),
                        )
                      ],
                    )
                  ],
                ),
              ),
            ),
            Expanded(
                flex: 4,
                child: GridView.builder(
                    itemCount: 9,
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 3),
                    itemBuilder: (BuildContext context, int index) {
                      return GestureDetector(
                        onTap: () {
                          _tap(index);
                        },
                        child: Container(
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(15),
                              border: Border.all(
                                  width: 5, color: Colors.deepPurple),
                              color: matchInd.contains(index)
                                  ? Colors.blueAccent
                                  : Colors.pink),
                          child: Center(
                            child: Text(
                              displayXO[index],
                              style: TextStyle(
                                  fontSize: 64,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.deepPurple),
                            ),
                          ),
                        ),
                      );
                    })),
            Expanded(
                flex: 2,
                child: Center(
                  child: Column(children: [
                    Text(
                      result,
                      style:
                          TextStyle(fontSize: 30, fontWeight: FontWeight.w900),
                    ),
                    SizedBox(
                      height: 10,
                    ),
                    buildTimer()
                  ]),
                )),
          ])),
    );
  }

  Widget buildTimer() {
    final isRunning = timer == null ? false : timer!.isActive;
    return isRunning
        ? SizedBox(
            width: 100,
            height: 100,
            child: Stack(
              fit: StackFit.expand,
              children: [
                CircularProgressIndicator(
                  value: 1 - sec / maxSec,
                  valueColor: AlwaysStoppedAnimation(Colors.transparent),
                  strokeWidth: 8,
                  backgroundColor: Colors.deepPurpleAccent,
                ),
                Center(
                  child: Text(
                    '$sec',
                    style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.redAccent,
                        fontSize: 50),
                  ),
                )
              ],
            ),
          )
        : ElevatedButton(
            style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16)),
            onPressed: () {
              startTimer();
              _clearboard();
              attempts++;
            },
            child: Text(
              attempts == 0 ? 'Start' : 'Play Again',
              style: TextStyle(fontSize: 28, color: Colors.black87),
            ),
          );
  }
}
